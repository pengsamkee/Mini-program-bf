"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var capacity = 15;
var list = [];
function getAllValue() {
    list = [];
    for (var index = 0; index < capacity; index++) {
        var key = "LRU_" + index;
        var jsonString = wx.getStorageSync(key);
        console.log(jsonString);
        if (jsonString && jsonString !== "") {
            var foodObj = JSON.parse(jsonString);
            list.push(foodObj);
        }
    }
    return list;
}
exports.getAllValue = getAllValue;
function saveAllValue() {
    for (var index = 0; index < list.length; index++) {
        var key = "LRU_" + index;
        var foodObj = list[index];
        var jsonString = JSON.stringify(foodObj);
        wx.setStorageSync(key, jsonString);
    }
}
exports.saveAllValue = saveAllValue;
function setValue(valObj) {
    var foodId = valObj.foodId;
    for (var index = 0; index < list.length; index++) {
        if (foodId === list[index].foodId) {
            list.splice(index, 1);
        }
    }
    if (list.length === capacity) {
        list.pop();
    }
    list.unshift(valObj);
    saveAllValue();
}
exports.setValue = setValue;
function clearAll() {
    for (var index = 0; index < capacity; index++) {
        var key = "LRU_" + index;
        wx.setStorageSync(key, "");
    }
}
exports.clearAll = clearAll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGV4dENhY2hlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGV4dENhY2hlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0UsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ3BCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkLFNBQWdCLFdBQVc7SUFDekIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNWLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDN0MsSUFBSSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEIsSUFBSSxVQUFVLElBQUksVUFBVSxLQUFLLEVBQUUsRUFBQztZQUNsQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7S0FDRjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQWJELGtDQWFDO0FBR0QsU0FBZ0IsWUFBWTtJQUMxQixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRCxJQUFJLEdBQUcsR0FBRyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3BDO0FBQ0gsQ0FBQztBQVBELG9DQU9DO0FBR0QsU0FBZ0IsUUFBUSxDQUFDLE1BQU07SUFDN0IsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzQixLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBQztRQUUvQyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFDO1lBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO0tBQ0Y7SUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssUUFBUSxFQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNaO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixZQUFZLEVBQUUsQ0FBQztBQUNqQixDQUFDO0FBZEQsNEJBY0M7QUFFRCxTQUFnQixRQUFRO0lBQ3RCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDN0MsSUFBSSxHQUFHLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUN6QixFQUFFLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUM1QjtBQUNILENBQUM7QUFMRCw0QkFLQyIsInNvdXJjZXNDb250ZW50IjpbIlxuICBjb25zdCBjYXBhY2l0eSA9IDE1O1xuICB2YXIgbGlzdCA9IFtdO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBnZXRBbGxWYWx1ZSgpIHtcbiAgICBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNhcGFjaXR5OyBpbmRleCsrKSB7XG4gICAgICBsZXQga2V5ID0gXCJMUlVfXCIgKyBpbmRleDtcbiAgICAgIGxldCBqc29uU3RyaW5nID0gd3guZ2V0U3RvcmFnZVN5bmMoa2V5KTtcbiAgICAgIGNvbnNvbGUubG9nKGpzb25TdHJpbmcpO1xuICAgICAgLy9jb252ZXJ0IGpzb25TdGluZyB0byBhbiBvYmplY3RcIkxSVV9cIlxuICAgICAgaWYgKGpzb25TdHJpbmcgJiYganNvblN0cmluZyAhPT0gXCJcIil7XG4gICAgICAgIGxldCBmb29kT2JqID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgbGlzdC5wdXNoKGZvb2RPYmopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIC8vc2F2ZSBhbGwgdmFsdWUgdG8gY2FjaGVcbiAgZXhwb3J0IGZ1bmN0aW9uIHNhdmVBbGxWYWx1ZSgpIHtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGxldCBrZXkgPSBcIkxSVV9cIiArIGluZGV4O1xuICAgICAgbGV0IGZvb2RPYmogPSBsaXN0W2luZGV4XTtcbiAgICAgIGxldCBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZm9vZE9iaik7XG4gICAgICB3eC5zZXRTdG9yYWdlU3luYyhrZXksIGpzb25TdHJpbmcpO1xuICAgIH1cbiAgfVxuXG4gIC8vanVkZWdlIHRoZSB1bmlxdWUgaXRlbSBieSBmb29kSWRcbiAgZXhwb3J0IGZ1bmN0aW9uIHNldFZhbHVlKHZhbE9iail7XG4gICAgbGV0IGZvb2RJZCA9IHZhbE9iai5mb29kSWQ7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKXtcbiAgICAgIC8vcmVtb3ZlIHRoZSBvYmogd2l0aCBzYW1lIGtleVxuICAgICAgaWYgKGZvb2RJZCA9PT0gbGlzdFtpbmRleF0uZm9vZElkKXtcbiAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsMSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vY2FjaGUgZnVsbCBsZW5ndGggY2FzZSxyZW1vdmUgbGFzdFxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gY2FwYWNpdHkpe1xuICAgICAgbGlzdC5wb3AoKTtcbiAgICB9XG4gICAgbGlzdC51bnNoaWZ0KHZhbE9iaik7XG4gICAgc2F2ZUFsbFZhbHVlKCk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gY2xlYXJBbGwoKXtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY2FwYWNpdHk7IGluZGV4KyspIHtcbiAgICAgIGxldCBrZXkgPSBcIkxSVV9cIiArIGluZGV4O1xuICAgICAgd3guc2V0U3RvcmFnZVN5bmMoa2V5LCBcIlwiKTtcbiAgICB9XG4gIH0iXX0=