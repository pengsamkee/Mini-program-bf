"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./../../../api/app/interface");
var ConfirmMeal = (function () {
    function ConfirmMeal() {
        this.data = {
            mealId: 20646,
            imgH: null,
            imgKey: null,
            imgW: null,
            mealDate: null,
            mealType: null,
            taggs: [],
            unitArr: [],
            showPicker: false,
            columns: [],
            pickerIndex: null,
            chooseUnitIndex: '',
            totalEnergy: 0,
        };
    }
    ConfirmMeal.prototype.onLoad = function (options) {
        var _this = this;
        var _a = JSON.parse(options.jsonMealInfo), imgH = _a.imgH, imgKey = _a.imgKey, imgW = _a.imgW, mealDate = _a.mealDate, mealType = _a.mealType, taggs = _a.taggs;
        this.setData({
            imgH: imgH,
            imgKey: imgKey,
            imgW: imgW,
            mealDate: mealDate,
            mealType: mealType,
            taggs: taggs,
        }, function () {
            _this.getFoodUnitOptionList();
        });
    };
    ConfirmMeal.prototype.handleShowPicker = function (e) {
        var pickerIndex = e.currentTarget.dataset.pickerIndex;
        if (pickerIndex === 'person') {
            var columns = [1, 2, 3, 4, 5, 6];
        }
        else {
            var columns = this.data.unitArr[pickerIndex].unitOption.map(function (item) { return item.unitName; });
        }
        this.setData({
            columns: columns,
            pickerIndex: pickerIndex,
            showPicker: true,
            showPopup: false
        });
    };
    ConfirmMeal.prototype.onConfirm = function () {
        this.setData({ showPicker: false, showPopup: true });
    };
    ConfirmMeal.prototype.onChange = function (e) {
        var _this = this;
        var chooseUnitIndex = e.detail.index;
        this.data.unitArr[this.data.pickerIndex].chooseUnitIndex = chooseUnitIndex;
        this.setData({ unitArr: this.data.unitArr }, function () {
            _this.totalEnergy();
        });
    };
    ConfirmMeal.prototype.getFoodUnitOptionList = function () {
        var _this = this;
        var req = this.data.taggs.map(function (item) {
            return {
                foodId: item.foodId,
                foodType: item.foodType
            };
        });
        console.log(8888, this.data.taggs);
        interface_1.default.getFoodUnitOptionList({ foodUnitOptionList: req }).then(function (res) {
            res.map(function (item) {
                item.chooseUnitIndex = 0;
                item.amount = 1;
            });
            var unitArr = res.slice();
            _this.setData({ unitArr: unitArr }, function () {
                _this.totalEnergy();
            });
        }).catch(function (err) {
            wx.showToast({ title: err.msg, icon: 'none' });
        });
    };
    ConfirmMeal.prototype.handleAmountInput = function (e) {
        var _this = this;
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var value = e.detail.value;
        value = parseInt(value);
        this.data.unitArr[inputIndex].amount = value;
        this.setData({ unitArr: this.data.unitArr }, function () {
            _this.totalEnergy();
        });
    };
    ConfirmMeal.prototype.handleAmountInputFocus = function (e) {
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var item = this.data.unitArr[inputIndex];
        item.focusAmount = item.amount;
        item.amount = 0;
        this.setData({ unitArr: this.data.unitArr });
    };
    ConfirmMeal.prototype.handleAmountInputBlur = function (e) {
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var item = this.data.unitArr[inputIndex];
        if (item.amount == 0) {
            debugger;
            item.amount = item.focusAmount;
            this.setData({ unitArr: this.data.unitArr });
        }
    };
    ConfirmMeal.prototype.totalEnergy = function () {
        var unitArr = this.data.unitArr;
        var totalEnergy = unitArr.reduce(function (pre, next) {
            return next.amount / 100 * next.unitOption[next.chooseUnitIndex].energy + pre;
        }, 0);
        totalEnergy = Math.round(totalEnergy);
        this.setData({ totalEnergy: totalEnergy });
    };
    ConfirmMeal.prototype.handleGoWeightReferencePage = function () {
        wx.navigateTo({ url: './../weightReference/index' });
    };
    ConfirmMeal.prototype.createMealLog = function () {
        var _this = this;
        var _a = this.data, mealDate = _a.mealDate, mealType = _a.mealType, imgKey = _a.imgKey, imgW = _a.imgW, imgH = _a.imgH, taggs = _a.taggs;
        taggs.map(function (item, index) {
            var chooseUnitItem = _this.data.unitArr[index];
            item.inputType = 1;
            console.log(88, _this.data.unitArr);
            item.amount = chooseUnitItem.amount;
            item.unitId = chooseUnitItem.unitOption[chooseUnitItem.chooseUnitIndex].unitId;
            item.recognitionResults = item.resultList.slice();
            delete item.resultList;
            delete item.selectedPos;
        });
        debugger;
        var req = {
            mealDate: mealDate,
            mealType: mealType,
            imgKey: imgKey,
            imgW: imgW,
            imgH: imgH,
            foodInfoList: taggs
        };
        wx.showLoading({ title: '加载中...' });
        interface_1.default.createMealLog(req).then(function (res) {
            wx.hideLoading();
            wx.showToast({ title: '食物记录成功' });
            setTimeout(function () {
                wx.switchTab({ url: '/pages/home/index' });
            }, 1450);
        }).catch(function (err) {
            console.log(122, err);
        });
    };
    return ConfirmMeal;
}());
Page(new ConfirmMeal());
//# sourceMappingURL=data:application/json;base64,