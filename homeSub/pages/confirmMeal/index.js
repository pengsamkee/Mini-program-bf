"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app = getApp();
var interface_1 = require("./../../../api/app/interface");
var ConfirmMeal = (function () {
    function ConfirmMeal() {
        this.data = {
            imgH: null,
            imgKey: null,
            imgW: null,
            mealDate: null,
            mealType: null,
            taggs: [],
            unitArr: [],
            showPicker: false,
            columns: [],
            pickerIndex: null,
            chooseUnitIndex: '',
            totalEnergy: 0,
            columnsForWXml: null,
            title: null,
        };
    }
    ConfirmMeal.prototype.onLoad = function (options) {
        var _this = this;
        var _a = JSON.parse(options.jsonMealInfo), imgH = _a.imgH, imgKey = _a.imgKey, imgW = _a.imgW, mealDate = _a.mealDate, mealType = _a.mealType, taggs = _a.taggs, title = _a.title;
        this.setData({
            imgH: imgH,
            imgKey: imgKey,
            imgW: imgW,
            mealDate: mealDate,
            mealType: mealType,
            taggs: taggs,
            title: title,
        }, function () {
            _this.getFoodUnitOptionList();
        });
    };
    ConfirmMeal.prototype.handleShowPicker = function (e) {
        var pickerIndex = e.currentTarget.dataset.pickerIndex;
        var columns = this.data.unitArr[pickerIndex].unitOption.map(function (item) { return item.unitName; });
        var columnsForWXml = this.data.unitArr[pickerIndex].unitOption.map(function (item) {
            return item.unitName === '100克' ? item.unitName : item.unitName + '（' + item.unitWeight + '克）';
        });
        this.setData({
            columnsForWXml: columnsForWXml,
            columns: columns,
            pickerIndex: pickerIndex,
            showPicker: true,
            showPopup: false
        });
    };
    ConfirmMeal.prototype.onConfirm = function () {
        this.setData({ showPicker: false, showPopup: true });
    };
    ConfirmMeal.prototype.onChange = function (e) {
        var _this = this;
        var chooseUnitIndex = e.detail.index;
        this.data.unitArr[this.data.pickerIndex].chooseUnitIndex = chooseUnitIndex;
        this.setData({ unitArr: this.data.unitArr }, function () {
            _this.totalEnergy();
        });
    };
    ConfirmMeal.prototype.getFoodUnitOptionList = function () {
        var _this = this;
        var foodUnitOptionList = this.data.taggs.map(function (item) {
            return {
                foodId: item.foodId,
                foodType: item.foodType
            };
        });
        interface_1.default.getFoodUnitOptionList({ foodUnitOptionList: foodUnitOptionList }).then(function (res) {
            res.map(function (item) {
                item.chooseUnitIndex = 0;
                item.amount = 1;
            });
            _this.setData({ unitArr: res }, function () {
                _this.totalEnergy();
            });
        }).catch(function (err) {
            wx.showToast({ title: err.message, icon: 'none' });
        });
    };
    ConfirmMeal.prototype.handleAmountInput = function (e) {
        var _this = this;
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var value = e.detail.value;
        this.data.unitArr[inputIndex].amount = value;
        this.setData({ unitArr: this.data.unitArr }, function () {
            _this.totalEnergy();
        });
    };
    ConfirmMeal.prototype.handleAmountInputFocus = function (e) {
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var item = this.data.unitArr[inputIndex];
        item.focusAmount = item.amount;
        item.amount = 0;
        this.setData({ unitArr: this.data.unitArr });
    };
    ConfirmMeal.prototype.handleAmountInputBlur = function (e) {
        var inputIndex = e.currentTarget.dataset.inputIndex;
        var item = this.data.unitArr[inputIndex];
        if (item.amount == 0) {
            item.amount = item.focusAmount;
            this.setData({ unitArr: this.data.unitArr });
        }
    };
    ConfirmMeal.prototype.totalEnergy = function () {
        var unitArr = this.data.unitArr;
        var totalEnergy = unitArr.reduce(function (pre, next) {
            return next.amount * next.unitOption[next.chooseUnitIndex].energy + pre;
        }, 0);
        totalEnergy = Math.round(totalEnergy);
        this.setData({ totalEnergy: totalEnergy });
    };
    ConfirmMeal.prototype.handleGoWeightReferencePage = function () {
        wx.navigateTo({ url: './../weightReference/index' });
    };
    ConfirmMeal.prototype.createMealLog = function () {
        var _this = this;
        var _a = this.data, mealDate = _a.mealDate, mealType = _a.mealType, imgKey = _a.imgKey, imgW = _a.imgW, imgH = _a.imgH, taggs = _a.taggs, title = _a.title;
        taggs.map(function (item, index) {
            var chooseUnitItem = _this.data.unitArr[index];
            item.inputType = 1;
            item.amount = chooseUnitItem.amount;
            item.unitId = chooseUnitItem.unitOption[chooseUnitItem.chooseUnitIndex].unitId;
            item.unitWeight = chooseUnitItem.unitOption[chooseUnitItem.chooseUnitIndex].unitWeight;
            item.unitName = chooseUnitItem.unitOption[chooseUnitItem.chooseUnitIndex].unitName;
            item.recognitionResults = item.resultList.slice();
            delete item.resultList;
            delete item.selectedPos;
        });
        var req = {
            mealDate: mealDate,
            mealType: mealType,
            imgKey: imgKey,
            imgW: imgW,
            imgH: imgH,
            foodInfoList: taggs
        };
        wx.showLoading({ title: '加载中...' });
        interface_1.default.createMealLog(req).then(function (res) {
            wx.hideLoading();
            wx.showToast({ title: '食物记录成功' });
            setTimeout(function () {
                wx.reLaunch({ url: "./../mealAnalysis/index?mealType=" + mealType + "&mealDate=" + mealDate + "&mealLogId=" + res.mealLogId + "&title=" + title });
            }, 1450);
        }).catch(function (err) {
            wx.showToast({ title: err.message });
        });
    };
    return ConfirmMeal;
}());
Page(new ConfirmMeal());
//# sourceMappingURL=data:application/json;base64,